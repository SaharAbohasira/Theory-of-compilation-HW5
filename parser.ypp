%{
        #include <iostream>
        #include "hw3_output.hpp"
        #include "types.h"
        #include "symbol_table.h"
        #include "general.h"
        #include "cg.hpp"

        using namespace std;
        using namespace output;
        extern int yylineno;
        extern int yylex();
        extern ScopeSymbolTable scopeSymbolTable;
        extern CodeBuffer buffer;
        extern general codeGenerator;
        vector<string> whileNextStack;
        vector<string> whileLabelStack;
        int yyerror(const char * merror);
        //#define YYDEBUG 1
%}

%nonassoc INT BYTE B BOOL TRUE FALSE RETURN IF WHILE BREAK CONTINUE SC ID NUM STRING COMMA
%nonassoc LOWER_THAN_ELSE

%right ASSIGN
%left OR
%left AND
%left EQUALITY
%left RELATIONAL
%left ADD_SUB
%left MULT_DIV
%right NOT
%left LPAREN RPAREN LBRACE RBRACE
%right ELSE

%%

Program: Statements                                             {$$ = new Program();}

Statements: Statement                                           {$$ = new Statements(dynamic_cast<Statement*>($1));}
            | Statements Statement                              {$$ = new Statements(dynamic_cast<Statements*>($1),dynamic_cast<Statement*>($2));}

Statement: LBRACE {scopeSymbolTable.push_scope();} Statements {scopeSymbolTable.pop_scope();} RBRACE {$$ = new Statement(); delete $3;}
           | Type ID SC                                         {$$ = new Statement(dynamic_cast<Type*>($1), $2);}
           | Type ID ASSIGN Exp SC                              {$$ = new Statement(dynamic_cast<Type*>($1), $2, dynamic_cast<Exp*>($4));}
           | ID ASSIGN Exp SC                                   {$$ = new Statement($1, dynamic_cast<Exp*>($3));}
           | Call SC                                            {$$ = new Statement(dynamic_cast<Call*>($1));}
           | RETURN SC                                          {$$ = new Statement(new Exp(), true); buffer.emit("ret i32 0");}
           | IF_ Statement  {$$ = new Statement("IF", dynamic_cast<IF_*>($1)->exp); scopeSymbolTable.pop_scope(); buffer.emit("br label %" + dynamic_cast<IF_*>($1)->label->false_label); buffer.emit(dynamic_cast<IF_*>($1)->label->false_label + ":");} %prec LOWER_THAN_ELSE
           | IF_ Statement ELSE {/*std::cout << "end scope line: " << yylineno<< std::endl;*/ scopeSymbolTable.pop_scope(); buffer.emit("br label %" + dynamic_cast<IF_*>($1)->label->next_label); buffer.emit(dynamic_cast<IF_*>($1)->label->false_label + ":");} PUSH Statement      {$$ = new Statement("IF_", dynamic_cast<IF_*>($1)->exp);/*std::cout << "end scope line: " << yylineno<< std::endl;*/ scopeSymbolTable.pop_scope(); buffer.emit("br label %" + dynamic_cast<IF_*>($1)->label->next_label); buffer.emit(dynamic_cast<IF_*>($1)->label->next_label + ":");}
           | WHILE W_Label LPAREN ISBOOL RPAREN {whileNextStack.push_back(dynamic_cast<Label*>($2)->false_label);
            whileLabelStack.push_back(dynamic_cast<Label*>($2)->next_label);
             scopeSymbolTable.push_scope(true);
              buffer.emit("br i1 " + dynamic_cast<Exp*>($4)->reg + ", label %" + dynamic_cast<Label*>($2)->true_label + ", label %" + dynamic_cast<Label*>($2)->false_label);
               buffer.emit(dynamic_cast<Label*>($2)->true_label + ":");}
                Statement {$$ = new Statement("WHILE", $4);
                /*std::cout << "end scope line: " << yylineno<< std::endl;*/ buffer.emit("br label %" + dynamic_cast<Label*>($2)->next_label);
                buffer.emit(dynamic_cast<Label*>($2)->false_label + ":");
                 whileNextStack.pop_back();
                  whileLabelStack.pop_back();
                   scopeSymbolTable.pop_scope();}
           | BREAK SC                                           {$$ = new Statement($1); buffer.emit("br label %" + whileNextStack.back()); /*whileNextStack.pop_back(); whileLabelStack.pop_back();*/}
           | CONTINUE SC                                        {$$ = new Statement($1); buffer.emit("br label %" + whileLabelStack.back());}

Call: ID LPAREN Exp RPAREN                                {$$ = new Call($1, $3);}

Type: INT                                                       {$$ = new Type("int");}
      | BYTE                                                    {$$ = new Type("byte");}
      | BOOL                                                    {$$ = new Type("bool");}


Exp: LPAREN Exp RPAREN                                          {$$ = new Exp(dynamic_cast<Exp*>($2));}
     | Exp MULT_DIV Exp                                         {$$ = new Exp($1, $3, $2->value, "binop");}
     | Exp ADD_SUB Exp                                          {$$ = new Exp($1, $3, $2->value, "binop");}
     | ID                                                       {$$ = new Exp($1, true);}
     | Call                                                     {$$ = new Exp($1, false);}
     | NUM                                                      {$$ = new Exp("int", $1);}
     | NUM B                                                    {$$ = new Exp("byte", $1);}
     | STRING                                                   {$$ = new Exp("string", $1);}
     | TRUE                                                     {$$ = new Exp("bool", $1);}
     | FALSE                                                    {$$ = new Exp("bool", $1);}
     | NOT Exp                                                  {$$ = new Exp($2, $2, $1->value, "bool");}
     | Exp AND Exp                                              {$$ = new Exp($1, $3, $2->value, "bool");}
     | Exp Label {buffer.emit("br i1 " + dynamic_cast<Exp*>($1)->reg + "label %" + dynamic_cast<Label*>($2)->true_label + ", label %" + dynamic_cast<Label*>($2)->false_label); buffer.emit(dynamic_cast<Label*>($2)->false_label + ":");} OR Label Exp                                               {buffer.emit("br i1 " + dynamic_cast<Exp*>($5)->reg + "label %" + dynamic_cast<Label*>($2)->true_label + ", label %" + dynamic_cast<Label*>($5)->false_label); buffer.emit(dynamic_cast<Label*>($5)->false_label + ":"); $$ = new Exp($1, $3, $2->value, "bool"); buffer.emit(dynamic_cast<Exp*>($$)->reg " = add i32 0, 0"); buffer.emit("br label %" + dynamic_cast<Label*>($2)->next_label); buffer.emit(dynamic_cast<Label*>($2)->true_label + ":"); buffer.emit(dynamic_cast<Exp*>($$)->reg " = add i32 1, 0"); buffer.emit("br label %" + dynamic_cast<Label*>($2)->next_label); buffer.emit(dynamic_cast<Label*>($2)->next_label + ":");}
     | Exp RELATIONAL Exp                                       {$$ = new Exp($1, $3, $2->value, "relop");}
     | Exp EQUALITY Exp                                         {$$ = new Exp($1, $3, $2->value, "relop");}
     | LPAREN Type RPAREN Exp                                   {$$ = new Exp(dynamic_cast<Type*>($2), dynamic_cast<Exp*>($4));}

PUSH:                                                           {/*std::cout << "start scope line: " << yylineno << std::endl;*/ scopeSymbolTable.push_scope();}
ISBOOL: Exp                                                     {is_bool($1);}
IF_: IF LPAREN ISBOOL RPAREN PUSH Label                     {buffer.emit("br i1 " + dynamic_cast<Exp*>($3)->reg + ", label %" + dynamic_cast<Label*>($6)->true_label + ", label %"+ dynamic_cast<Label*>($6)->false_label); $$ = new IF_(dynamic_cast<Exp*>($3),dynamic_cast<Label*>($6)); buffer.emit(dynamic_cast<Label*>($6)->true_label + ":");}
Label:                                                          {$$ = new Label();}
W_Label:                                                     {$$ = new Label(); buffer.emit("br label %" + dynamic_cast<Label*>($$)->next_label); buffer.emit(dynamic_cast<Label*>($$)->next_label + ":");}
%%

CodeBuffer buffer = CodeBuffer();
ScopeSymbolTable scopeSymbolTable = ScopeSymbolTable();
general codeGenerator = general();

int main(){
    //yydebug = 1;
    buffer.initialEmits();
    buffer.emit("define i32 @main(){");
    scopeSymbolTable.rbp = codeGenerator.freshVar();
    buffer.emit(scopeSymbolTable.rbp + " = alloca i32, i32 50");
    int parse = yyparse();
    scopeSymbolTable.check_program();
    buffer.emit("ret i32 0");
    buffer.emit("}");
    buffer.printGlobalBuffer();
    buffer.printCodeBuffer();
    return parse;
}

int yyerror(const char * merror){
    errorSyn(yylineno);
    exit(0);
}